@{
	Layout = "_Layout";
}

<div class="row justify-content-center mb-5">
	<div class="col-lg">
		<div class="card">
			<h5 class="card-header white-text py-4 mb-4" style="background-color: #0059AB;">
				<input type="text" class="form-control" maxlength="30" id="validateField" name="idtugas" data-target="validateField" placeholder="" value="@ViewBag.tgs_idtugas" hidden>
				<strong><span name="namatugas"></span>&nbsp;<span name="deadline"></span></strong>
			</h5>
			<div class="card-body px-lg-5 pt-1">
				<div class="row">
					<div class="col-md">
						<table class="table" id="datatable">
							<thead>
								<tr>
									<th scope="col">No Pendaftaran</th>
									<th scope="col">Nama</th>
									<th scope="col">Waktu Unggah</th>
									<th scope="col">Aksi</th>
								</tr>
							</thead>
							<tbody id="tbody">
								<tr>
									<td>@ViewBag.UserId</td>
									<td>@ViewBag.UserName</td>
									<td class="waktuunggah"></td>
									<td class="aksi"></td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="unggahTugasLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header" style="background-color:#0059ab;">
				<h5 class="modal-title text-white" id="unggahTugasLabel">Unggah Tugas</h5>
				<button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<p class="text-center">Format Pengumpulan File Hanya Mendukung .zip .rar .doc .txt</p>
				<div class="input-group mb-4">
					<input type="file" class="form-control" id="tugas" name="tugas" data-target="validateField" placeholder="" accept=".zip, .rar, .doc, .txt">
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" data-dismiss="modal">Tutup</button>
				<button type="button" class="btn text-white" style="background-color:#0059ab;" onclick="unggahTugas(event)">Simpan</button>
			</div>
		</div>
	</div>
</div>

<script>
	var deadlineDate;
	var currentDate = new Date();
	var tugas = null;

	$(document).ready(function () {
		loadDataTugas();
		loadDetail();
	});

	function formatTanggal(dateString) {
		const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
		const formattedDate = new Date(dateString).toLocaleDateString('id-ID', options);
		return formattedDate;
	}

	function formatJam(dateString) {
		const options = { hour: 'numeric', minute: 'numeric', hour12: false };
		const formattedTime = new Date(dateString).toLocaleTimeString('id-ID', options);
		return formattedTime;
	}

	function loadDataTugas() {
		var idtugas = document.getElementsByName("idtugas")[0];
		var namatugas = document.getElementsByName("namatugas")[0];
		var deadline = document.getElementsByName("deadline")[0];

		var hostname = "https://localhost:7087/";
		var url = hostname + "datatugas?tgs_idtugas=" + idtugas.value;
		var method = "GET";

		$.ajax({
			url: url,
			method: method,
			contentType: "application/json",
			success: function (data) {
				var item = data.data;
				idtugas.value = item.tgs_idtugas;
				namatugas.textContent = item.tgs_namatugas;
				deadline.textContent = '[Batas Waktu Pengumpulan Tugas : ' + formatTanggal(item.tgs_deadline) + ' | ' + formatJam(item.tgs_deadline) + ' WIB]';
				deadlineDate = new Date(item.tgs_deadline);
				loadTable();
				console.log(tugas)
			},
			error: function (error) {
				console.error("Error fetching data:", error);
			},
		});
	}

	function loadTable() {
		if (currentDate <= deadlineDate) {
			// Create a button with Font Awesome icon
			var uploadButton = document.createElement('button');
			uploadButton.innerHTML = '<i class="fa fa-upload" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Unggah Tugas"></i>';
			uploadButton.className = 'btn btn-primary';
			uploadButton.setAttribute('type', 'button');
			uploadButton.setAttribute('data-toggle', 'modal');
			uploadButton.setAttribute('data-target', '#myModal');

			// Append the button to the 'aksi' cell
			document.querySelector('.aksi').appendChild(uploadButton);
		}
	}

	function getCurrentDateTime() {
		var now = new Date();
		var year = now.getFullYear();
		var month = padZero(now.getMonth() + 1);  // Months are zero-based
		var day = padZero(now.getDate());
		var hours = padZero(now.getHours());
		var minutes = padZero(now.getMinutes());
		var seconds = padZero(now.getSeconds());

		var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
		return formattedDateTime;
	}

	function padZero(value) {
		return value < 10 ? '0' + value : value;
	}

	function unggahTugas(event) {
		event.preventDefault();

		var idtugas = "@ViewBag.tgs_idtugas";
		var nopendaftaran = "@ViewBag.UserId";
		var waktupengumpulan = getCurrentDateTime()
		var tugasInput = document.getElementsByName("tugas")[0];
		var file = tugasInput.files[0];

		if (!file) {
			location.reload()
		}

		var hostname = "https://localhost:7087/";
		var method;
		var url;

		if (tugas == null) {
			method = "POST";
			url = hostname + "Tugas/UploadTugas?dts_iddetail=" + idtugas + "&dts_nopendaftaran=" + nopendaftaran + "&dts_waktupengumpulan=" + waktupengumpulan + "&dts_nilaitugas=0";
		} else {
			method = "PUT";
			url = hostname + "Tugas/UbahTugas?dts_iddetail=" + idtugas + "&dts_nopendaftaran=" + nopendaftaran + "&dts_waktupengumpulan=" + waktupengumpulan + "&dts_nilaitugas=0";
		}

		var data = new FormData();
		data.append("file", file);

		$.ajax({
			url: url,
			method: method,
			data: data,
			processData: false,
			contentType: false,
			success: function (data) {
				Swal.fire({
					position: "top-end",
					icon: "success",
					title: "Berhasil Mengunggah Tugas",
					showConfirmButton: false,
					timer: 2000
				}).then(() => {
					location.reload();
				});
			},
			error: function (xhr, status) {
				console.error("AJAX request error:", status);
				console.log("Server response:", xhr.responseJSON);
			},
		});
	}

	function loadDetail() {
		var idtugas = document.getElementsByName("idtugas")[0];
		var nopendaftaran = "@ViewBag.UserId";

		var hostname = "https://localhost:7087/";
		var url = hostname + "Tugas/DataDetailTugas?dts_iddetail=" + idtugas.value + "&dts_nopendaftaran=" + nopendaftaran;
		var method = "GET";

		$.ajax({
			url: url,
			method: method,
			contentType: "application/json",
			success: function (data) {
				if (data && data.data) {
					var item = data.data;
					var waktuUnggahElement = document.querySelector('.waktuunggah');
					var aksiElement = document.querySelector('.aksi');

					// Menggunakan fungsi formatTanggal dan formatJam yang telah Anda tentukan sebelumnya
					var formattedDate = formatTanggal(item.dts_waktupengumpulan);
					var formattedTime = formatJam(item.dts_waktupengumpulan);

					// Mengganti isi waktuunggah dengan tanggal dan waktu yang diformat
					waktuUnggahElement.textContent = formattedDate + ', ' + formattedTime + ' WIB';

					// Menyaring file name dari data
					var fileName = item.dts_filetugas;
					tugas = item.dts_filetugas;

					// Membuat tautan download
					var downloadLink = document.createElement('a');
					downloadLink.href = '#';
					downloadLink.className = 'btn btn-primary download-link';
					downloadLink.setAttribute('data-file', fileName);
					downloadLink.innerHTML = '<i class="fa fa-download" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Unduh ' + fileName + '"></i>';

					// Menambahkan tautan download ke dalam elemen aksi
					aksiElement.appendChild(downloadLink);

					$('.download-link').on('click', function (e) {
						e.preventDefault();
						var fileName = $(this).data('file');
						downloadFile(fileName);
					});
				} else {
					// Menangani jika data tidak ditemukan
					console.log("Data tidak ditemukan");
				}
			},
		});
	}

	function downloadFile(fileName) {
		var url = "https://localhost:7087/Tugas/DownloadTugasMahasiswa";

		fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(fileName),
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.blob();
			})
			.then(blob => {
				var url = URL.createObjectURL(blob);
				var a = document.createElement('a');
				a.href = url;
				a.download = fileName;
				document.body.appendChild(a);
				a.click();
				document.body.removeChild(a);
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

</script>
